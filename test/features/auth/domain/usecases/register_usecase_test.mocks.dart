// Mocks generated by Mockito 5.4.6 from annotations
// in delivery_app/test/features/auth/domain/usecases/register_usecase_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:delivery_app/core/error/failures.dart' as _i5;
import 'package:delivery_app/features/auth/domain/entities/auth_entity.dart'
    as _i6;
import 'package:delivery_app/features/auth/domain/repositories/auth_repository.dart'
    as _i2;
import 'package:delivery_app/features/auth/domain/usecases/login_usecase.dart'
    as _i7;
import 'package:fpdart/fpdart.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i2.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<_i4.Either<_i5.Failure, _i6.AuthEntity>> login(
    _i7.LoginParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#login, [params]),
            returnValue:
                _i3.Future<_i4.Either<_i5.Failure, _i6.AuthEntity>>.value(
                  _i8.dummyValue<_i4.Either<_i5.Failure, _i6.AuthEntity>>(
                    this,
                    Invocation.method(#login, [params]),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, _i6.AuthEntity>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, bool>> register(
    String? email,
    String? password,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#register, [email, password]),
            returnValue: _i3.Future<_i4.Either<_i5.Failure, bool>>.value(
              _i8.dummyValue<_i4.Either<_i5.Failure, bool>>(
                this,
                Invocation.method(#register, [email, password]),
              ),
            ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, bool>>);

  @override
  _i3.Future<_i4.Either<_i5.Failure, _i6.AuthEntity>> refreshToken(
    String? refreshToken,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#refreshToken, [refreshToken]),
            returnValue:
                _i3.Future<_i4.Either<_i5.Failure, _i6.AuthEntity>>.value(
                  _i8.dummyValue<_i4.Either<_i5.Failure, _i6.AuthEntity>>(
                    this,
                    Invocation.method(#refreshToken, [refreshToken]),
                  ),
                ),
          )
          as _i3.Future<_i4.Either<_i5.Failure, _i6.AuthEntity>>);
}
