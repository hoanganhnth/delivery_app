// Mocks generated by Mockito 5.4.6 from annotations
// in delivery_app/test/features/auth/presentation/providers/auth_notifier_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:delivery_app/core/error/failures.dart' as _i6;
import 'package:delivery_app/core/usecases/usecase.dart' as _i13;
import 'package:delivery_app/features/auth/domain/entities/auth_entity.dart'
    as _i7;
import 'package:delivery_app/features/auth/domain/repositories/auth_repository.dart'
    as _i2;
import 'package:delivery_app/features/auth/domain/usecases/clear_tokens_usecase.dart'
    as _i14;
import 'package:delivery_app/features/auth/domain/usecases/get_tokens_usecase.dart'
    as _i12;
import 'package:delivery_app/features/auth/domain/usecases/login_usecase.dart'
    as _i3;
import 'package:delivery_app/features/auth/domain/usecases/refresh_token_usecase.dart'
    as _i10;
import 'package:delivery_app/features/auth/domain/usecases/register_usecase.dart'
    as _i9;
import 'package:delivery_app/features/auth/domain/usecases/store_tokens_usecase.dart'
    as _i11;
import 'package:fpdart/fpdart.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i8;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeAuthRepository_0 extends _i1.SmartFake
    implements _i2.AuthRepository {
  _FakeAuthRepository_0(Object parent, Invocation parentInvocation)
    : super(parent, parentInvocation);
}

/// A class which mocks [LoginUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoginUseCase extends _i1.Mock implements _i3.LoginUseCase {
  @override
  _i2.AuthRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAuthRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeAuthRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AuthRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i7.AuthEntity>> call(
    _i3.LoginParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i4.Future<_i5.Either<_i6.Failure, _i7.AuthEntity>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i7.AuthEntity>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, _i7.AuthEntity>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i7.AuthEntity>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, _i7.AuthEntity>>);
}

/// A class which mocks [RegisterUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRegisterUseCase extends _i1.Mock implements _i9.RegisterUseCase {
  @override
  _i2.AuthRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAuthRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeAuthRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AuthRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, bool>> call(_i9.RegisterParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, bool>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, bool>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, bool>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, bool>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, bool>>);
}

/// A class which mocks [RefreshTokenUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockRefreshTokenUseCase extends _i1.Mock
    implements _i10.RefreshTokenUseCase {
  @override
  _i2.AuthRepository get repository =>
      (super.noSuchMethod(
            Invocation.getter(#repository),
            returnValue: _FakeAuthRepository_0(
              this,
              Invocation.getter(#repository),
            ),
            returnValueForMissingStub: _FakeAuthRepository_0(
              this,
              Invocation.getter(#repository),
            ),
          )
          as _i2.AuthRepository);

  @override
  _i4.Future<_i5.Either<_i6.Failure, _i7.AuthEntity>> call(
    _i10.RefreshTokenParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i4.Future<_i5.Either<_i6.Failure, _i7.AuthEntity>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i7.AuthEntity>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, _i7.AuthEntity>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i7.AuthEntity>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, _i7.AuthEntity>>);
}

/// A class which mocks [StoreTokensUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockStoreTokensUseCase extends _i1.Mock
    implements _i11.StoreTokensUseCase {
  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(
    _i11.StoreTokensParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}

/// A class which mocks [GetTokensUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTokensUseCase extends _i1.Mock implements _i12.GetTokensUseCase {
  @override
  _i4.Future<_i5.Either<_i6.Failure, _i7.AuthEntity?>> call(
    _i13.NoParams? params,
  ) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue:
                _i4.Future<_i5.Either<_i6.Failure, _i7.AuthEntity?>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i7.AuthEntity?>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, _i7.AuthEntity?>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, _i7.AuthEntity?>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, _i7.AuthEntity?>>);
}

/// A class which mocks [ClearTokensUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockClearTokensUseCase extends _i1.Mock
    implements _i14.ClearTokensUseCase {
  @override
  _i4.Future<_i5.Either<_i6.Failure, void>> call(_i13.NoParams? params) =>
      (super.noSuchMethod(
            Invocation.method(#call, [params]),
            returnValue: _i4.Future<_i5.Either<_i6.Failure, void>>.value(
              _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                this,
                Invocation.method(#call, [params]),
              ),
            ),
            returnValueForMissingStub:
                _i4.Future<_i5.Either<_i6.Failure, void>>.value(
                  _i8.dummyValue<_i5.Either<_i6.Failure, void>>(
                    this,
                    Invocation.method(#call, [params]),
                  ),
                ),
          )
          as _i4.Future<_i5.Either<_i6.Failure, void>>);
}
